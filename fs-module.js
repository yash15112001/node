// sync read-write
// const {readFileSync,writeFileSync} = require('fs')

// const def_functions = readFileSync('./data.txt','utf8')
// writeFileSync('./output_of_fs-module.txt',`here is the output : ${def_functions} , the output is generated by fs-module.js file`,{flag:'a'});

// async read-write
const {readFile,writeFile} = require('fs')

// readFile('./data.txt','utf8',(err,result)=>{
//     if(err){
//         console.log(err)
//         return
//     }
//     const first = result
//     readFile('./fs-module.js','utf8',(err,result)=>{
//         if(err){
//             console.log(err);
//             return;
//         }
//         const second = result
//         writeFile('./output-fs-async.txt',`the output of the async read-write : ${first} , ${second}.`,(err,result)=>{
//             if(err){
//                 console.log(err);
//                 return;
//             }
//             console.log(result);
//         })
//     })
// })
console.log("before operation");
// here the readFile is off loaded
readFile('./data.txt','utf8',(err,result)=>{
    if(err){
        console.log(err);
        return
    }
    console.log(result);
    console.log("during operation");
})
console.log("after operation");

// output of this .js file should be : before operation after operation this is data file content during operation

// alternatives for avoiding these types of nesting -> using async await funtions and promises
// promises/async-await